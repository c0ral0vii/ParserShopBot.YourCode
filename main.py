import logging
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from src.browser.service import BrowserService
from db.orm import create_user, create_order, get_latest_fee
from db.database import db
from config import bot_token
from src.converter.service import Converter

bot = Bot(token=bot_token)
dp = Dispatcher()


@dp.message(Command("/admin"))
async def admin(message: types.Message,):
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")

@dp.message(CommandStart())
async def start(message: types.Message,):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    user_id = message.from_user.id

    username = message.from_user.username
    
    await create_user(user_id, username if username else "-")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ —Ü–µ–Ω—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞."
    )

@dp.message(F.text)
async def item_message(message: types.Message,):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏"""
    user_id = message.from_user.id
    message_text = message.text
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É
        if not message_text.startswith(('http://', 'https://')):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
            return
        
        answer_message = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
        
        browser = BrowserService()
        data = await browser.find_item(message_text)
        
        if data:
            model = Converter()
            
            standart_price_rub = await model.convert_sum(sum=int(data["standart_price"]), currency=data["currency"])

        
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
            # sizes_text = "\n".join(
            #     f"{item['size']}: {item['price']} ({await model.convert_sum(item['price'], data['currency'])})"
            #     for item in data.get("sizes", [])
            # )
            
            caption = (
                f"üè∑ <b>{data['title']}</b>\n\n"
                f"üí∞ –¶–µ–Ω–∞: {data['standart_price']}{data["currency"]} ({standart_price_rub})\n\n"
                "üõí –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
            )
            print(data)
            
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{data.get('product_id', '')}")]
            ])
            
            if data.get("title_img"):
                await bot.send_photo(
                    chat_id=user_id,
                    photo=data["title_img"],
                    caption=caption,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    text=caption,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            
            await answer_message.delete()
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def on_startup():

    commands = [
        types.BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Restart bot)"),
    ]

    await bot.set_my_commands(commands)


async def run():
    await bot.delete_webhook(drop_pending_updates=True)
    await on_startup()

    await dp.start_polling(bot)
    
if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    asyncio.run(run())
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    